from datetime import datetime

from django.core.exceptions import ObjectDoesNotExist, ValidationError
from django.db import transaction
from django.db.models import Sum
from django.shortcuts import get_object_or_404

from batch.models import Batch
from box.models import Box
from client.models import Client
from group.models import Group
from history.models import History
from operation.models import Operation
from product.models import Product
from django.db.models import Q


def create_operation(user, operation_type, number, description, client_id, products, delivery_data=None, invoice_data=None):
    """
    Vytvo≈ôen√≠ operace (v√Ωdejka/p≈ô√≠jemka) se zadan√Ωmi produkty, klientem, krabicemi a dodac√≠mi √∫daji.
    """
    try:
        if operation_type not in ['IN', 'OUT']:
            raise ValueError("Neplatn√Ω typ operace. Mus√≠ b√Ωt 'IN' nebo 'OUT'.")

        try:
            client = Client.objects.get(id=client_id)
        except ObjectDoesNotExist:
            raise ValueError(f"Klient s ID {client_id} neexistuje.")

        with transaction.atomic():
            operation = Operation.objects.create(
                type=operation_type,
                status='CREATED',
                user=user,
                description=description,
                number=number,
                client=client
            )

            for product_data in products:
                try:
                    product = product_data["product_id"]
                    quantity = product_data["quantity"]
                    batch_number = product_data.get("batch_name")
                    expiration_date = product_data.get("expiration_date")
                    box_ean = product_data.get("box_name")

                    if operation_type == "IN":
                        box = create_new_box(box_ean)
                        add_group_to_in_operation(
                            operation=operation,
                            product_id=product.id,
                            batch_number=batch_number or '',
                            box_id=box.id if box else None,
                            quantity=quantity,
                            expiration_date=expiration_date
                        )
                    else:
                        add_group_to_out_operation(
                            operation=operation,
                            product_id=product.id,
                            batch_number=batch_number or '',
                            quantity=quantity,
                            expiration_date=expiration_date
                        )
                except ObjectDoesNotExist:
                    raise ValueError(f"Produkt s ID {product_data['productId'].id} neexistuje.")
                except Exception as e:
                    raise Exception(e)

            if operation_type == 'OUT' and delivery_data and invoice_data:
                set_delivery_data(operation, delivery_data)
                set_invoice_data(operation, invoice_data)

        return operation

    except ValueError as ve:
        return {"error": str(ve)}

    except Exception as e:
        return {"error": str(e)}

### üîπ **P≈ôid√°n√≠ skupiny do p≈ô√≠jemky**
def add_group_to_in_operation(operation, product_id, batch_number, box_id, quantity, expiration_date=None):
    """
    P≈ôid√°n√≠ skupiny (Group) do p≈ô√≠jemky ‚Äì vytvo≈ôen√≠ nov√© ≈°ar≈æe nebo p≈ôid√°n√≠ do existuj√≠c√≠.
    """
    product = Product.objects.get(id=product_id)

    # ‚úÖ Ovƒõ≈ôen√≠, zda u≈æ existuje stejn√° ≈°ar≈æe v r√°mci t√©to operace
    existing_group = operation.groups.filter(batch__batch_number=batch_number).exists()
    if existing_group:
        raise ValueError(f"≈†ar≈æe {batch_number} u≈æ byla do t√©to p≈ô√≠jemky p≈ôid√°na.")

    if expiration_date:
        expiration_date = datetime.fromisoformat(expiration_date)

    if expiration_date == "":
        expiration_date = None

    # ‚úÖ Pokud neexistuje, vytvo≈ô√≠me nebo naƒçteme ≈°ar≈æi (Batch)
    batch, created = Batch.objects.get_or_create(
        product=product,
        batch_number=batch_number,
        defaults={"expiration_date": expiration_date}
    )

    # ‚úÖ Vytvo≈ôen√≠ nov√© krabice, pokud nen√≠ definov√°na
    box = Box.objects.get(id=box_id) if box_id else None

    # ‚úÖ Vytvo≈ôen√≠ nov√© skupiny (Group) a p≈ôid√°n√≠ do operace
    group = Group.objects.create(
        batch=batch,
        box=box,
        quantity=quantity
    )
    operation.groups.add(group)

    # ‚úÖ Aktualizace mno≈æstv√≠ produktu
    product.refresh_from_db()
    return group

def add_group_to_out_operation(operation, product_id, quantity, batch_number=None, expiration_date=None):
    """
    P≈ôid√°n√≠ existuj√≠c√≠ skupiny (Group) do v√Ωdejky ‚Äì hled√° odpov√≠daj√≠c√≠ skladovou z√°sobu a rozdƒõl√≠ ji, pokud je pot≈ôeba.
    """
    product = Product.objects.get(id=product_id)
    quantity = int(quantity)

    # Filtrujeme existuj√≠c√≠ groups s t√≠mto produktem, ≈°ar≈æ√≠ a expirac√≠ (pokud jsou specifikov√°ny)
    existing_groups = Group.objects.filter(
        batch__product=product
    )

    if batch_number:
        existing_groups = existing_groups.filter(batch__batch_number=batch_number)
    if expiration_date:
        existing_groups = existing_groups.filter(batch__expiration_date=expiration_date)

    existing_groups.annotate(total_quantity=Sum("quantity")).order_by("batch__expiration_date")

    if not existing_groups:
        raise ValueError(f"Nenalezena ≈æ√°dn√° dostupn√° groupa pro produkt {product_id} se ≈°ar≈æ√≠ {batch_number}.")

    total_available = sum(group.quantity for group in existing_groups)
    if total_available < quantity:
        raise ValueError(
            f"Nedostateƒçn√© z√°soby pro produkt {product_id}. Po≈æadov√°no {quantity}, dostupn√© {total_available}.")

    selected_groups = []
    selected_quantity = 0

    for group in existing_groups:
        if selected_quantity + group.quantity < quantity:
            selected_groups.append(group)
            selected_quantity += group.quantity
        elif selected_quantity + group.quantity == quantity:
            selected_groups.append(group)
            selected_quantity += group.quantity
            break
        else:
            # Posledn√≠ groupa p≈ôesahuje po≈æadovan√© mno≈æstv√≠ ‚Äì rozdƒõl√≠me ji
            remaining_quantity = group.quantity - (quantity - selected_quantity)

            # Vytvo≈ô√≠me novou `group`, kter√° z≈Østane v p≈Øvodn√≠ch operac√≠ch
            new_group = Group.objects.create(
                batch=group.batch,
                box=group.box,
                quantity=remaining_quantity
            )

            # P≈ôi≈ôad√≠me novou `group` do stejn√Ωch operac√≠ jako p≈Øvodn√≠ `group`
            new_group_operations = group.operations.all()
            for existing_operation in new_group_operations:
                existing_operation.groups.add(new_group)

            # Upravit p≈Øvodn√≠ `group` pro v√Ωdejku
            group.quantity = quantity - selected_quantity
            selected_groups.append(group)
            selected_quantity += group.quantity
            group.save()
            break

        # P≈ôid√°me vybran√© `groups` do v√Ωdejky
    for group in selected_groups:
        operation.groups.add(group)

    return selected_groups


### üîπ **Funkce pro spr√°vu krabic**
def create_new_box(ean):
    """
    Vytvo≈ô√≠ novou krabici p≈ôi p≈ô√≠jmu zbo≈æ√≠.
    """
    return Box.objects.create(ean=ean or '')


def select_or_create_out_box(operation, box_id=None, ean=None):
    """
    Vybere krabici pro v√Ωdejku. Pokud nen√≠ zadan√°, zkus√≠ ji z√≠skat z existuj√≠c√≠ skupiny operace.
    """
    if box_id:
        return Box.objects.get(id=box_id)

    if ean:
        box = Box.objects.filter(ean=ean).first()
        if box:
            return box

    existing_group = Group.objects.filter(box__isnull=False, operations__type='IN').first()
    return existing_group.box if existing_group else None


### üîπ **P≈ôid√°n√≠ dodac√≠ch √∫daj≈Ø k v√Ωdejce**
def set_delivery_data(operation, delivery_data):
    """
    Nastav√≠ dodac√≠ √∫daje pro v√Ωdejku.
    """
    operation.delivery_name = delivery_data.get("delivery_name")
    operation.delivery_street = delivery_data.get("delivery_street")
    operation.delivery_city = delivery_data.get("delivery_city")
    operation.delivery_psc = delivery_data.get("delivery_psc")
    operation.delivery_country = delivery_data.get("delivery_country", "CZ")
    operation.delivery_phone = delivery_data.get("delivery_phone")
    operation.delivery_email = delivery_data.get("delivery_email")
    operation.save()

def set_invoice_data(operation, invoice_data):
    operation.invoice_name = invoice_data.get("invoice_name")
    operation.invoice_street = invoice_data.get("invoice_street")
    operation.invoice_city = invoice_data.get("invoice_city")
    operation.invoice_psc = invoice_data.get("invoice_psc")
    operation.invoice_country = invoice_data.get("invoice_country", "CZ")
    operation.invoice_phone = invoice_data.get("invoice_phone")
    operation.invoice_email = invoice_data.get("invoice_email")
    operation.invoice_ico = invoice_data.get("invoice_ico")
    operation.invoice_vat = invoice_data.get("invoice_vat")
    operation.save()


### üîπ **Rezervace ≈°ar≈æ√≠ pro v√Ωdejku**
def reserve_batches_for_out_operation(operation):
    """
    Rezervace ≈°ar≈æ√≠ pro v√Ωdej.
    """
    if operation.status != 'CREATED':
        raise ValueError("Operace nen√≠ ve stavu 'Vytvo≈ôeno'.")

    for group in operation.groups.all():
        batch = group.batch
        if batch.quantity < group.quantity:
            raise ValueError(f"Nedostatek z√°sob ve ≈°ar≈æi {batch.batch_number}.")
        batch.quantity -= group.quantity
        batch.save()

    operation.status = 'IN_PROGRESS'
    operation.save()
    return {"message": f"≈†ar≈æe pro operaci ID {operation.id} byly rezervov√°ny."}


### üîπ **Zpracov√°n√≠ v√Ωdejky**
def process_out_operation(operation):
    """
    Zpracov√°n√≠ v√Ωdejky ‚Äì aktualizace z√°sob.
    """
    if operation.status != 'IN_PROGRESS':
        raise ValueError("Operace nen√≠ ve stavu 'Prob√≠h√°'.")

    for group in operation.groups.all():
        batch = group.batch
        StockChange.objects.create(
            product=batch.product,
            batch=batch,
            change=-group.quantity,
            operation=operation,
            user=operation.user
        )
        group.delete()
        batch.product.refresh_from_db()

    operation.status = 'COMPLETED'
    operation.save()
    return {"message": f"V√Ωdejka ID {operation.id} byla √∫spƒõ≈°nƒõ zpracov√°na."}


### üîπ **Zpracov√°n√≠ p≈ô√≠jemky**
def process_in_operation(operation):
    """
    Zpracov√°n√≠ p≈ô√≠jemky.
    """
    if operation.status != 'CREATED':
        raise ValueError("Operace nen√≠ ve stavu 'Vytvo≈ôeno'.")

    with transaction.atomic():
        for group in operation.groups.all():
            batch = group.batch
            StockChange.objects.create(
                product=batch.product,
                batch=batch,
                change=group.quantity,
                operation=operation,
                user=operation.user
            )

        operation.status = 'COMPLETED'
        operation.save()

        for group in operation.groups.all():
            group.batch.product.refresh_from_db()

    return {"message": f"P≈ô√≠jemka ID {operation.id} byla √∫spƒõ≈°nƒõ zpracov√°na."}


### üîπ **Storno operace**
def cancel_operation(operation, user):
    """Storno operace."""
    if operation.status == 'COMPLETED':
        raise ValueError("Dokonƒçenou operaci nelze stornovat.")

    with transaction.atomic():
        if operation.type == 'OUT':
            for group in operation.groups.all():
                group.batch.quantity += group.quantity
                group.batch.save()
        elif operation.type == 'IN':
            for group in operation.groups.all():
                group.batch.delete()

        operation.status = 'CANCELLED'
        operation.save(user=user)

        History.objects.create(
            type="operation",
            related_id=operation.id,
            user=user,
            description="Operace byla stornov√°na"
        )

    return {"message": f"Operace ID {operation.id} byla stornov√°na."}

def update_operation(operation, data):
    """
    Aktualizace operace.
    """
    allowed_fields = [
        "description",
        "number",
        "status",
        'delivery_date',
        'delivery_name',
        'delivery_street',
        'delivery_city',
        'delivery_psc',
        'delivery_country',
        'delivery_phone',
        'delivery_email',
        'delivery_note',
        'invoice_name',
        'invoice_street',
        'invoice_city',
        'invoice_psc',
        'invoice_country',
        'invoice_phone',
        'invoice_email',
        'invoice_ico',
        'invoice_vat'
    ]

    for field in allowed_fields:
        if field in data['delivery_data']:
            setattr(operation, field, data['delivery_data'][field])
        elif field in data['invoice_data']:
            setattr(operation, field, data['invoice_data'][field])
        else:
            if field in data:
                setattr(operation, field, data[field])

    operation.save()
    return operation

def remove_operation(operation):
    if operation.type == 'IN':
        groups = operation.groups.all()
        other_operations_exist = any(
            group.operations.exclude(id=operation.id).exists() for group in groups
        )
        if not other_operations_exist:
             batch_id = operation.groups.all().values_list('batch__id', flat=True)
             batches = Batch.objects.filter(id__in=batch_id)
             batches.delete()
             operation.groups.all().delete()
             operation.delete()
             return True
        else:
            raise Exception('Operaci nelze smazat')

    if operation.type == 'OUT':
        operation.groups = None
        operation.save()
        operation.delete()
        return True


def revert_last_status_change(operation, user):
    """Vr√°cen√≠ operace do p≈ôedchoz√≠ho stavu."""
    last_change = History.objects.filter(type=operation, related_id=operation.id, description__startswith="status").order_by(
        '-timestamp').first()
    if not last_change:
        raise ValueError("≈Ω√°dn√° zmƒõna stavu nenalezena.")

    previous_status = last_change.description.split("z '")[1].split("' na")[0]
    operation.status = previous_status
    operation.save(user=user)

    History.objects.create(
        type="operation",
        related_id=operation.id,
        user=user,
        description=f"Stav operace vr√°cen zpƒõt na {previous_status}"
    )

    return {"message": f"Operace {operation.number} byla vr√°cena na stav {previous_status}"}


def add_product_to_box(operation_id, box_id, product_id, quantity):
    """P≈ôid√°n√≠ produktu do krabice s rozdƒõlen√≠m mno≈æstv√≠ a oznaƒçen√≠m `rescanned`"""

    with transaction.atomic():
        operation = get_object_or_404(Operation, id=operation_id)
        box = get_object_or_404(Box, id=box_id)
        product = get_object_or_404(Product, id=product_id)

        # Najdeme v≈°echny grupy s t√≠mto produktem, kter√© je≈°tƒõ nejsou rescanned
        groups = operation.groups.filter(batch__product_id=product.id, rescanned=False).order_by('id')

        total_available = sum(group.quantity for group in groups)

        if quantity > total_available:
            raise ValidationError(f"Po≈æadovan√© mno≈æstv√≠ ({quantity}) p≈ôevy≈°uje dostupn√© mno≈æstv√≠ ({total_available}).")

        if total_available < quantity:
            raise ValueError(
                f"Nedostateƒçn√© z√°soby pro produkt {product.id}. Po≈æadov√°no {quantity}, dostupn√© {total_available}.")

        remaining_quantity = quantity
        new_groups = []

        for group in groups:
            if remaining_quantity == 0:
                break

            if group.quantity <= remaining_quantity:
                # P≈ôesuneme celou grupu a oznaƒç√≠me ji jako `rescanned`
                group.box = box
                group.rescanned = True
                group.save()
                remaining_quantity -= group.quantity
                new_groups.append(group)

            else:
                # Rozdƒõl√≠me grupu
                new_group = Group.objects.create(
                    batch=group.batch,
                    box=box,
                    quantity=remaining_quantity,
                    rescanned=True
                )
                group.quantity -= remaining_quantity
                group.save()
                new_groups.append(new_group)
                remaining_quantity = 0

        # P≈ôid√°me grupy do operace
        for group in new_groups:
            operation.groups.add(group)

        return {"message": f"Produkt {product.name} p≈ôid√°n do krabice {box.ean} v poƒçtu {quantity} ks."}

def get_operation_product_summary(operation_id):
    """Vr√°t√≠ seznam produkt≈Ø a jejich celkov√© mno≈æstv√≠ v operaci"""

    operation = get_object_or_404(Operation, id=operation_id)

    product_summary = {}

    for group in operation.groups.all():
        product_id = group.batch.product.id
        product_name = group.batch.product.name

        if product_id not in product_summary:
            product_summary[product_id] = {"id": product_id, "name": product_name, "total_quantity": 0, "rescanned": 0}

        product_summary[product_id]["total_quantity"] += group.quantity
        if group.rescanned:
            product_summary[product_id]["rescanned"] += group.quantity

    return list(product_summary.values())